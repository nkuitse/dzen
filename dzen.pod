=head1 NAME

dzen2 - general purpose messaging, notification and menu program

=head1 SYNOPSIS

    dzen2 [-v] [-p [seconds]] [-m [v|h]] [-ta <l|c|r>] [-sa <l|c|r>]
          [-x <pixel>] [-y <pixel>] [-w <pixel>] [-tw <pixel>] [-u] 
          [-e <string>] [-l <lines>]  [-fn <font>] [-bg <color>] [-fg <color>]

=head1 OPTIONS

=over 4

=item B<-fg> I<COLOR>

Foreground color.

=item B<-bg> I<COLOR>

Background color.

=item B<-fn> I<FONT>

Font, see xfd(1) and xfontsel(1).

=item B<-ta> B<l>|B<c>|B<r>

Alignment of title window content (left, ccenter, or right).

=item B<-tw> I<NUM>

Title window width in pixels.

=item B<-sa> B<l>|B<c>|B<r>

Alignment of slave window.

=item B<-l> I<NUM>

Enables support for displaying multiple lines. I<NUM> is the number of lines to
be displayed.

These lines of input are held in the slave window which becomes active as soon
as the pointer enters the title (default action) window.

If the mouse leaves the slave window it will be hidden unless it is set sticky
by clicking with Button2 into it (default action).

Button4 and Button5 (mouse wheel) will scroll the slave window up and down if
the content exceeds the window height (default action).

=item B<-e> I<STRING>

Events and actions, separated by C<;>.  See below for details.

=item B<-m> B<v>|B<h>

Menu mode (vertical or horizontal).

=item B<-u>

Update contents of title and slave window simultaneously.

The way it works is best described by an example:

=over 4

=item Motivation

We want to display an updating clock in the title and some log output in the
slave window.

=item Solution

  while true; do
        date                # output goes to the title window
        dmesg | tail -n 10  # output goes to the slave window
        sleep 1
  done | dzen2 -l 10 -u

For this to work correctly it is essential to provide exactly the number of
lines to the slave window as defined by the parameter to '-l'.

=item B<-p> [I<SECONDS>]

Persist after EOF is reached (with I<SECONDS> timeout).

=item B<-x> I<NUM>

x position in pixels.

=item B<-y I<NUM>>

y position in pixels.

=item B<-h> I<NUM>

Line height in pixels (default: fontheight + 2).

=item B<-w> I<NUM>

Width in pixels.

=item B<-xs>

Number of Xinerama screen to use.

=item B<-v>

Print version information and exit.

=back

=head1 DESCRIPTION

dzen2 displays an unmanaged window with text read from standard input.  By
default, the window is one line high and changes to show the latest line of
input that has been read.  If the window is more than one line high (option
B<-l>) then the first line of text is fixed as the window's title and the
remaining lines in the window are updated as lines are read.

=head2 Window layout

Dzen's window layout is as follows:

     ------------------------------------------
    |        Title window, single line         |
    `------------------------------------------´
    |                                          |
    |               scrollable                 |
    |              Slave window                |
    |             multiple lines               |
    |     lines to display simultaneously      |
    |           controlled with the            |
    |              '-l' option                 |
    |                                          |
    |                                          |
    `------------------------------------------´

The first line you provide to dzen always goes to the title window; all other
consecutive lines will be drawn to the slave window unless you explicitly
overide this with the in-text formatting language command C<^tw()>.

=head2 Termination

dzen uses two different approaches to terminate itself:

=over 4

=item Timed termination

If EOF is received then dzen terminates, unless the B<-p> option is set.

B<-p> without argument persist forever.

B<-p> with argument n  persist for n seconds.

=item Interactive termination

By default, if mouse button3 is clicked then dzen2 terminates.  In some modes
the Escape key terminates too, see (2)

=head2 Events and actions

dzen allows the user to associate actions to events.

The command line syntax is as follows:

    -e 'event1=action1:option1:...option<n>,...,action<m>;...;event<l>'

Every event can take any number of actions and every action can take any number
of options. (By default limited to 64 each, easily changable in action.h)

An example:

    -e 'button1=exec:xterm:firefox;entertitle=uncollapse,unhide;button3=exit'

Meaning:

On Button1 event (Button1 press on the mouse) execute xterm and firefox.
Note: xterm and firefox are options to the exec action

On entertitle (mouse pointer enters the title window) uncollapse the slave
window and unhide the title window.

On button3 event exit dzen.

=head3 Supported events

=over 4

=item B<onstart>

Perform actions right after startup

=item B<onexit>

Perform actions just before exiting

=item B<onnewinput>

Perform actions if there is new input for the slave window

=item B<button1>

Mouse button1 released 

=item B<button2>

Mouse button2 released

=item B<button3>

Mouse button3 released

=item B<button4>

Mouse button4 released (usually scrollwheel)

=item B<button5>

Mouse button5 released (usually scrollwheel)

=item B<entertitle>

Mouse enters the title window

=item B<leavetitle>

Mouse leaves the title window

=item B<enterslave>

Mouse enters the slave window

=item B<leaveslave>

Mouse leaves the slave window

=item B<sigusr1>

SIGUSR1 received 

=item B<sigusr2>

SIGUSR2 received

=item B<key_>I<KEYNAME>

Keyboard events.

Every key can be bound to an action (see below). The format is: key_KEYNAME
where KEYNAME is the name of the key as defined in keysymdef.h (usually:
/usr/include/X11/keysymdef.h).  The part after 'XK_' in keysymdef.h must be
used for KEYNAME.

=over 4

=item B<exec:command1:..:n>

execute all given options

=item B<menuexec>

executes selected menu entry

=item B<exit:retval>

exit dzen and return 'retval'

=item B<print:str1:...:n>

write all given options to STDOUT

=item B<menuprint>

write selected menu entry to STDOUT

=item B<collapse>

collapse (roll-up) slave window

=item B<uncollapse>

uncollapse (roll-down) slave window

=item B<togglecollapse>

toggle collapsed state

=item B<stick>

stick slave window

=item B<unstick>

unstick slave window

=item B<togglestick>

toggle sticky state

=item B<hide>

hide title window

=item B<unhide>

unhide title window

=item B<togglehide>

toggle hide state

=item B<raise>

raise window to view (above all others)

=item B<lower>

lower window (behind all others)

=item B<scrollhome>

show head of input

=item B<scrollend>

show tail of input

=item B<scrollup:n>

scroll slave window n lines up   (default n=1)

=item B<scrolldown:n>

scroll slave window n lines down (default n=1)

=item B<grabkeys>

enable keyboard support

=item B<ungrabkeys>

disable keyboard support

=item B<grabmouse>

enable mouse support; only needed with specific windowmanagers, such as fluxbox

=item B<ungrabmouse>

release mouse; only needed with specific windowmanagers, such as fluxbox

=back

Note: If no events/actions are specified dzen defaults as follows.

=over 4

=item B<Title only mode>

    -e 'button3=exit:13'

=item B<Multiple lines and vertical menu mode>

    -e 'entertitle=uncollapse,grabkeys;
        enterslave=grabkeys;leaveslave=collapse,ungrabkeys;
        button1=menuexec;button2=togglestick;button3=exit:13;
        button4=scrollup;button5=scrolldown;
        key_Escape=ungrabkeys,exit'

=item B<Horizontal menu mode>

    -e 'enterslave=grabkeys;leaveslave=ungrabkeys;
        button4=scrollup;button5=scrolldown;
        key_Left=scrollup;key_Right=scrolldown;
        button1=menuexec;button3=exit:13
        key_Escape=ungrabkeys,exit'

If you define any events/actions, there is no default behaviour, i.e. you will
have to specify B<all> events/actions you want to use.

=head2 Menu modes

Dzen provides two menu modes, vertical and horizontal menus. You can access
these modes by adding 'v'(ertical) or 'h'(horizontal) to the '-m' option. If
nothing is specified dzen defaults to vertical menus.

Vertical menu, both invocations are equivalent:

    dzen2 -p -l 4 -m < file
    dzen2 -p -l 4 -m v < file

Horizontal menu:

    dzen2 -p -l 4 -m h < file

All actions beginning with "menu" work on the selected menu entry.

Note: Menu mode only makes sense if '-l <n>' is specified!

Horizontal menus have no title window, so all actions
affecting the title window will be silently discarded
in this mode.

=head2 IN-LINE FORMATTING

This feature allows you to dynamically (at runtime) format the text dzen
displays.

Currently the following commands are supported:

=head3 Colors

=over

=item B<^fg(color)>

Set foreground color

=item B<^fg()>

Without arguments, sets default fg color

=item B<^bg(color)>

Set background color

=item B<^bg()>

Without arguments, sets default bg color

=back

=head3 Graphics

=over 4

=item B<^i(path)>

draw icon specified by path; Supported formats: XBM and optionally XPM

=item B<^r(WIDTHxHEIGHT)>

draw a rectangle with the dimensions

=item B<^ro(WIDTHxHEIGHT)>

rectangle outline

=item B<^c(RADIUS)>

draw a circle with size RADIUS pixels

=item B<^co(RADIUS)>

circle outline

=back

=head3 Positioning:

=over 4

=item B<^p(PIXEL)>

position next input amount of PIXELs to the right or left of the current position, a.k.a. relative positioning

=item B<^pa(PIXEL)>

position next input at PIXEL, a.k.a. absolute positioning.  For maximum predictability ^^pa() should only be used with '-ta l' or '-sa l'.

=back

=head3 Other

=over 4

=item B<^tw()>

draw to title window.  This command has some annoyances, as only the input after the command will be drawn to the title window, so it is best used only once and as first command per line.  Subject to be improved in the future.

=item B<^ib(VALUE)>

ignore background setting, VALUE can be either 1 to ignore or 0 to not ignore the bg color set with ^bg(color).  This command is useful in combination with ^p() and ^pa() in order to position the input inside other already drawn input.

=back

Example: 

    ^^ib(1)^^fg(red)^^ro(100x15)^^p(-98)^^fg(blue)^^r(20x10)^^fg(orange)^^p(3)^^r(40x10)^^p(4)^^fg(darkgreen)^^co(12)^^p(2)^^c(10)

These commands can appear anywhere and in any combination in dzen's input. 

The color can be specified either as symbolic name (e.g. red, darkgreen, etc.)
or as #rrggbb hex-value (e.g. #ffffaa).

Icons must be in the XBM or optionally XPM format, see the "bitmaps" directory
for some sample icons. With the standard "bitmap" application you can easily
draw your own icons.

Note:   Displaying XPM (pixmap) files imposes a somewhat higher load than
lightweight XBM files, so use them with care in tight loops.

Rectangles will be truncated to the maximum possible size if you specify
a size bigger than dzen's window.

Doubling the '^^' character removes the special meaning from it.

Some examples:

    ^fg(red)I'm red text ^fg(blue)I am blue
    ^bg(#ffaaaa)The ^fg(yellow)text to ^bg(blue)^fg(orange)colorize
    ^fg(grey70)Some text containing ^^ characters

Icons:

    ^i(bitmaps/envelope.xbm) I am an envelope ^fg(yellow)and ^i(bitmaps/battery.xbm) I'm a baterry.

Rectangles:

    6x4 rectangle ^r(6x4) ^fg(red)12x8 ^r(12x8) ^fg(yellow)and finally 100x15 ^r(100x15)

Relative positioning:

    Some text^p(100)^fg(yellow)100 pixels to the right^p(50)^fg(red)50 more pixels to the right

=head1 EXAMPLES

=over 4

=item Display message and timeout after 10 seconds

    (echo "This is a message"; sleep 10) | dzen2 -bg darkred -fg grey80 -fn fixed 

=item Display message and never timeout

    echo "This is a message"| dzen2 -p


=item Display updating single line message

    for i in $(seq 1 20); do A=${A}'='; print $A; sleep 1; done | dzen2

=item Display header and a message with multiple lines

    (echo Header; cal; sleep 20) | dzen2 -l 8

Displays "Header" in the title window and the output of cal in the 8
lines high slave window.

=item Display updating messages

    (echo Header; while true; do echo test$((i++)); sleep 1; done) | dzen2 -l 12

The slave window will update contents if new input has arrived.

=item Display log files

    (su -c "echo LOGFILENAME; tail -f /var/log/messages") | dzen2 -l 20 -x 100 -y 300 -w 500

=item Monthly schedule with remind

    (echo Monthly Schedule; remind -c1 -m) | dzen2 -l 52 -w 410 -p -fn lime -bg '#e0e8ea' -fg black -x 635

=item Simple menu

    echo "Applications" | dzen2 -l 4 -p -m < menufile

=item Horizontal menu without any files

    {echo Menu; echo -e "xterm\nxclock\nxeyes\nxfontsel"} | dzen2 -l 4 -m h -p

=item Extract PIDs from the process table

    {echo Procs; ps -a} | dzen2 -m -l 12 -p \
    -e 'button1=menuprint;button3=exit;button4=scrollup:3;button5=scrolldown:3;entertitle=uncollapse;leaveslave=collapse' \
            | awk '{print $1}'

=item Dzen as xmonad (see http://xmonad.org) statusbar

    status.sh | dzen2 -ta r -fn '-*-profont-*-*-*-*-11-*-*-*-*-*-iso8859' -bg '#aecf96' -fg black \
        -p -e 'sigusr1=raise;sigusr2=lower;onquit=exec:rm /tmp/dzen2-pid;button3=exit' & echo $! > /tmp/dzen2-pid

=head1 FAQ

=over 4

=item I don't want a slave window, what to do?

Do not provide the '-l' option, all lines will be displayed in the title
window, this is the default behaviour.

=item I used the '-l' option but no slave window appears.

With the default event/action handling the slave window will only be displayed
if you hover with the mouse over the title window. See "(2) Events and actions"
if you'd like to change this.

=item If I echo some text or cat a file dzen closes itself imediatelly.

There are 2 different approaches dzen uses to terminate itself, see next
section "Termination".

=item Ok, the title and slave thing works, can I update the contents of both windows at the same time?

Sure, see "(4) Simultaneous updates" or use the in-text command "^tw()" to
explicitly draw to the title windwow.  See section (5) for further details

=item Can i change the color of my input at runtime?

Yes, you can change both background and foreground colors and much more -- see
B<In-Text formatting language>.

=item Can I use dzen as a menu?

Yes, both vertical and horizontal menus are supported.  See B<Menu> for further
details.

=back

=head1 DIAGNOSTICS

dzen's exit status is one of the following:

=over 4

=item 0

dzen received EOF

=item 1

Some error occured, inspect the error message

=item (user defined)

Set with 'exit:retval' action.

=head1 BUGS

Unknown.

=head1 AUTHOR

Robert Manea

=head1 LICENCE AND COPYRIGHT

Copyright (c) 2007 by Robert Manea.

=cut
